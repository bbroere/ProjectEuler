import {generateFirstN} from "../utilities/sequences";
import {isSPolygonal, polygonalNumber} from "../utilities/numbers";

/**
 * <p>Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$. The first ten pentagonal numbers are:
 * $$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \dots$$</p>
 * <p>It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 - 22 = 48$, is not pentagonal.</p>
 * <p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the value of $D$?</p>
 *
 * <p>Generated on 2024-08-09 from <a href='https://projecteuler.net/problem=44'>source</a></p>
 * <p><i><b>Average runtime ~150 ms</b></i></p>
 */
export function run(): number {
    let max: number = 0;
    let res: number | undefined = undefined;
    do {
        max += 1000;
        res = findWithMax(max);
    } while (!res);
    return res;
}

function findWithMax(max: number): number | undefined {
    const allPentagonals: number[] = generateFirstN(max, polygonalNumber(5));
    let currentMin: number = allPentagonals.slice(-1)[0];
    let foundOne: boolean = false;
    for (let i: number = 0; i < allPentagonals.length; i++) {
        for (let j: number = i + 1; j < allPentagonals.length; j++) {
            if (
                isSPolygonal(5, (allPentagonals[j] - allPentagonals[i])) &&
                isSPolygonal(5, allPentagonals[j] + allPentagonals[i]) &&
                (allPentagonals[j] - allPentagonals[i]) < currentMin
            ) {
                foundOne = true;
                currentMin = allPentagonals[j] - allPentagonals[i];
            }
        }
    }
    return foundOne ? currentMin : undefined;
}
